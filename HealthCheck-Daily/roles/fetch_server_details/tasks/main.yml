---

- name: Fetch hostname of server
  shell: hostname
  register: hostname_value

- name: Fetch OS version details
  shell: echo $(cat /etc/os-release | awk -F= '$1 == "NAME" {print $2}' ) $(cat /etc/os-release | awk -F= '$1 == "VERSION" {print $2}')
  register: os_version_value

- name: Fetch uptime
  shell: uptime -p | sed  's/,//g'
  register: uptime_value


# CPU utilisation

- name: Fetch CPU percentage
  shell: echo $(( 100 -$(top -bn1 | grep '%Cpu(s)' | awk -F',' '{print $4}' | awk -F'.' '{print $1}')))
  register: cpu_percentage_value

- name: Set default value to CPU status
  set_fact: cpu_percentage_warning="false" cpu_percentage_critical="false"

- name: Check CPU Warning status
  set_fact: cpu_percentage_warning="true"
  when: cpu_percentage_value.stdout|int >= cpu_threshold_warning

- name: Check CPU Critical status
  set_fact: cpu_percentage_critical="true"
  when: cpu_percentage_value.stdout|int >= cpu_threshold_critical

  
# Memory Utilisation

- name: fetch memory percentage
  shell: echo $(free | grep Mem | awk '{print $3/$2 * 100.0}')
  register: memory_percentage_value

- name: Set default value to CPU status
  set_fact: memory_percentage_warning="false" memory_percentage_critical="false"

- name: Check Memory Warning status
  set_fact: memory_percentage_warning="true"
  when: memory_percentage_value.stdout|int >= memory_threshold_warning

- name: Check Memory Critical status
  set_fact: memory_percentage_critical="true"
  when: memory_percentage_value.stdout|int >= memory_threshold_critical



#

- name: Fetch Load averages
  shell: cat /proc/loadavg
  register: load_average_value

- name: Top 10 CPU process
  shell: ps -eo cmd,pid --sort=-%cpu | head
  register: top_cpu_process_values

- name: Top 10 Memory process
  shell: ps -eo cmd,pid --sort=-%mem | head
  register: top_memory_process_values

- name: IO status
  shell: echo $(top -bn1 | grep '%Cpu(s)' | awk -F',' '{printf "%.0f\n", $5}')
  register: io_status_values

# File system utilization section

- name: Check file system utilization
  shell: df /dev/sda1 | awk 'FNR == 2 {print $5}' | awk -F% '{print $1}'
  register: file_system_utilization_value

- name: Set default value to file system utilization status
  set_fact: file_system_utilization_warning="false" file_system_utilization_critical="false"

- name: Check file system utilization Warning status
  set_fact: file_system_utilization_warning="true"
  when: file_system_utilization_value.stdout|int >= file_system_utilization_threshold_warning

- name: Check file system utilization Critical status
  set_fact: file_system_utilization_critical="true"
  when: file_system_utilization_value.stdout|int >= file_system_utilization_threshold_critical

- name: Check read only file system
  shell: cat /proc/mounts | grep /dev/sda1 | grep ro | wc -l
  register: read_only_count_value

- name: Check if NFS mounted
  shell: cat /proc/mounts | grep nfsd | wc -l
  register: nfs_mount_status_value

- name: Fetch number of open files
  shell: cat /proc/sys/fs/file-nr | awk '{print $1}'
  register: open_files_value

#Critical Services

- name: Check ntpd service
  shell: echo $(systemctl status ntpd | grep Active | awk '{print $2}')
  register: ntpd_service

- name: Check rsyslogd service
  shell: echo $(systemctl status rsyslogd | grep Active | awk '{print $2}')
  register: rsyslogd_service

- name: Check crond service
  shell: echo $(systemctl status crond | grep Active | awk '{print $2}')
  register: crond_service

- name: Check sshd service
  shell: echo $(systemctl status sshd | grep Active | awk '{print $2}')
  register: sshd_service

#- name: Check vsftpd service
 # shell: echo $(systemctl status vsftpd | grep Active | awk '{print $2}')
  #register: vsftpd_service

- name: Check nfs service
  shell: echo $(systemctl status nfs | grep Active | awk '{print $2}')
  register: nfs_service

- name: Check network service
  shell: echo $(systemctl status network | grep Active | awk '{print $2}')
  register: network_service

- name: Time stamp
  shell: date +%Y-%h-%d_%H:%M
  register: time_stamp




#Cluster details

- name: Check Cluster true
  shell: uname
  when: cluster_state == "true"
  register: cluster_true

- name: Check Cluster false
  shell: echo "N.A"
  when: cluster_state == "false"
  register: cluster_false
  ignore_errors: true
    
- name: Generating html report
  template: 
    src: report_template_abg.html
    dest: /var/HealthCheckPOC/health-report-poc/html_reports/report-{{ time_stamp.stdout }}.html
  delegate_to: localhost
  run_once: true
  ignore_errors: true

- name: Generate csv report
  template: 
    src: report_template.csv
    dest: /var/HealthCheckPOC/health-report-poc/csv_reports/report-{{ time_stamp.stdout }}.csv
  when: generate_csv_report == "true"
  run_once: true
  delegate_to: localhost

#- name: Example playbook sending mail to root
 # mail:
  #  subject: System has been successfully provisioned.
  #delegate_to: localhost

- name: Send e-mail to a bunch of users, attaching files
  mail:
    host: smtp.gmail.com
    port: 587
    secure: starttls
    charset: utf-8
    username: mukul.katoch100@gmail.com
    password: psswd
    to: 
    - Mukul Katoch <mukul.katoch@opcito.com>
    subject: Ansible-report
    body: Hello, Attached with this email is Server Health Check Report 
    attach:
    - /var/HealthCheckPOC/health-report-poc/csv_reports/report-{{ time_stamp }}.csv
    - /var/HealthCheckPOC/health-report-poc/html_reports/report-{{ time_stamp }}.html
  delegate_to: localhost
  ignore_errors: true

- name: Print all values
  debug: 
    msg:  VALUE {{ item.value.stdout }}
    msg: VALUE {{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }}
  with_items:
    - { name: hostname, value: "{{ hostname_value }}" }
    - { name: OS Version, value: "{{ os_version_value }}" }
    - { name: cpu_percentage_value, value: "{{ cpu_percentage_value }}" }
    - { name: memory_percentage_value, value: "{{ memory_percentage_value }}" }
    - { name: file_system_utilization_value, value: "{{ file_system_utilization_value }}" }
    #- { name: Total Critical Services, value: "{{ critical_services }}" }
    #- { name: Total Warning Services, value: "{{ warning_services }}" }
    #- { name: Total Normal Services, value: "{{ normal_services }}" }
  when: print_all_values == "true"
